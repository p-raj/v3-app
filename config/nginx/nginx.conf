user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # don't send the nginx version number in error pages and Server header
    # access_log  /var/log/nginx/access.log  main;
    server_tokens off;
    access_log  off;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # Keep alive allows for fewer reconnections from the browser.
    keepalive_timeout 65;
    keepalive_requests 10000;

    # sendfile optimizes serving static files from the file system, like logos.
    sendfile on;

    # tcp_nopush optimizes the amount of data sent down the wire at once by
    # activating the TCP_CORK option within the TCP stack.
    # TCP_CORK blocks the data until the packet reaches the MSS,
    # which is equal to the MTU minus the 40 or 60 bytes of the IP header.
    tcp_nopush on;

    # tcp_nodelay allows nginx to make TCP send multiple buffers as individual packets.
    tcp_nodelay on;

    # client_body_buffer_size handles the client buffer size. Most client buffers
    # are coming from POST method form submissions.
    # 128k is normally a good choice for this setting.
    client_body_buffer_size      128k;

    # client_max_body_size sets the max body buffer size.
    # If the size in a request exceeds the configured value,
    # the 413 (Request Entity Too Large) error is returned to the client.
    # For reference, browsers cannot correctly display 413 errors.
    # Setting size to 0 disables checking of client request body size.
    client_max_body_size         10M;

    # client_header_buffer_size handles the client header size.
    # 1k is usually a sane choice for this by default.
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;
    output_buffers               1 32k;
    postpone_output              1460;

    # If your site serves static assets (such as CSS/JavaScript/images),
    # nginx can cache these files for a short period of time. Adding this within your
    # configuration block tells nginx to cache 1000 files for 120 seconds,
    # excluding any files that haven’t been accessed in 60 seconds,
    # and only files that have been accessed at least 5 times in that timeframe.
    # If you aren’t deploying frequently you can safely bump up these numbers higher.
    open_file_cache max=1000 inactive=60s;
    open_file_cache_valid 120s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_min_length 512;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    include /etc/nginx/conf.d/*.conf;
}
